" Change map leader to <Space>
let mapleader=" "

" Tab/Space
set expandtab
set tabstop=4
set shiftwidth=4
set smarttab

" <leader>. show hidden character
set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:¶,precedes:«,extends:»
nnoremap <silent> <leader>. :set list!<CR>

" Basic
filetype indent on
filetype plugin indent on " Indent helpers
let $FZF_DEFAULT_COMMAND='find -L -not -path "./.git/*"'
let @/ = ""
set autoread " automatic read file when changed outide vim
set clipboard=unnamedplus
set cursorline " Highlight current line
set foldmethod=indent
set helpheight=99999
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set linebreak
set mouse=a
set nofoldenable
set noshowmode
set noswapfile
set notimeout
set number
set relativenumber
set showcmd
set showmatch
set smartcase
set ttimeout
set ttyfast
set undodir=~/.vim/undo     " where to save undo histories
set undofile                " Save undo after file closes
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo
set wildmenu " Turn on wildmenu
set wrap
syntax enable

" Mapping
nnoremap j gj
nnoremap k gk
nnoremap <Down> g<Down>
nnoremap <Up> g<Up>

vnoremap j gj
vnoremap k gk
vnoremap <Down> g<Down>
vnoremap <Up> g<Up>

inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

nnoremap <leader>n :nohlsearch<CR> " turn off search highlight

nnoremap <silent> <leader>q :q<CR>
nnoremap <silent> <leader>Q :qa!<CR>

nnoremap <nowait> <TAB> <C-w>w
nnoremap * *``
nnoremap <leader>gr :Search <cword><CR>
vnoremap <leader>gr y:Search "<c-r>""<CR>
nnoremap <leader>r :reg<CR>

nnoremap <F8> :set invpaste paste?<CR>
set pastetoggle=<F8>

call plug#begin('~/.vim/plugged')

"
" File Browser
"
Plug 'scrooloose/nerdtree' " nerdtree
    let NERDTreeShowHidden = 1 " Display hidden files
    let NERDTreeMinimalUI=1 " Remove help at top
    nnoremap <silent> <leader>e :NERDTreeFind<CR>
    nnoremap <silent> <F2> :NERDTreeToggle<CR>
Plug 'Xuyuanp/nerdtree-git-plugin' " git in nerdtree
    let g:NERDTreeShowIgnoredStatus = 1
Plug 'ryanoasis/vim-devicons' " Icon
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    let g:DevIconsEnableFoldersOpenClose = 1

"
" Tags management
"
Plug 'ludovicchabant/vim-gutentags'
    let g:gutentags_cache_dir = $HOME.'/.vim/tags'
    let g:gutentags_ctags_exclude = ["*.min.js", "*.min.css", "build", "vendor", ".git", "node_modules", "*.vim/bundle/*", ".idea", ".vscode"]
Plug 'majutsushi/tagbar'
    let g:tagbar_compact = 1
    nmap <F6> :TagbarToggle<CR>
Plug 'ervandew/supertab'

"
" Window Layout
"
Plug 'ap/vim-buftabline' " manage buffer the sane way
    let g:buftabline_numbers = 2 " ordinal number
    let g:buftabline_indicators = 1 " show [edited]
    nmap <leader>1 <Plug>BufTabLine.Go(1)
    nmap <leader>2 <Plug>BufTabLine.Go(2)
    nmap <leader>3 <Plug>BufTabLine.Go(3)
    nmap <leader>4 <Plug>BufTabLine.Go(4)
    nmap <leader>5 <Plug>BufTabLine.Go(5)
    nmap <leader>6 <Plug>BufTabLine.Go(6)
    nmap <leader>7 <Plug>BufTabLine.Go(7)
    nmap <leader>8 <Plug>BufTabLine.Go(8)
    nmap <leader>9 <Plug>BufTabLine.Go(9)
    nmap <leader>0 <Plug>BufTabLine.Go(10)
    nnoremap <silent> <leader>w :MBEbd!<CR>
Plug 'fholgado/minibufexpl.vim'
    nnoremap <silent> <F4> :MBEToggle<CR>
    let g:miniBufExplorerAutoStart = 0
    let g:miniBufExplUseSingleClick = 1
    let g:miniBufExplBuffersNeeded = 1
    let g:miniBufExplCycleArround = 1
    let g:miniBufExplShowBufNumbers = 0
Plug 'Yggdroot/indentLine' " Show indent line
Plug 'kshenoy/vim-signature' " Manage Marks
    nnoremap m; :SignatureToggle<CR>
Plug 'itchyny/lightline.vim'
    command! LightlineReload call LightlineReload()
    let g:lightline = {
        \ 'colorscheme': 'powerline',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'readonly', 'fugitive', 'filename', 'modified' ] ],
        \   'right': [ [ 'lineinfo' ],
        \              [ 'indent' ],
        \              [ 'fileformat', 'fileencoding', 'filetype' ]  ]
        \ },
        \ 'component_function': {
        \   'fugitive' : 'LightlineFugitive',
        \   'indent'   : 'LightlineIndent',
        \   'lineinfo' : 'LightlineLineInfo',
        \ }
        \ }

function! LightlineFugitive()
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        return fugitive#head()
    else
        return ''
    endif
endfunction

function! LightlineIndent()
    let et = &et ==# 1 ? "space" : "tab"
    return (et . ':'. &tabstop)
endfunction

function! LightlineLineInfo()
    return line('.') * 100 / line('$') . '%' . ' / ' . line('$')
endfunction

function! LightlineReload()
    call lightline#init()
    call lightline#colorscheme()
    call lightline#update()
endfunction

"
" Find and Replace
"
Plug 'brooth/far.vim' " Find and replace
    let g:far#window_layout = 'current'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
    nnoremap <silent> <C-p> :Files<CR>
    nnoremap <F1> :Commands<CR>
    nnoremap <F3> :Search<space>
    nnoremap <space>b :Buffer<CR>
    nnoremap <space>m :Marks<CR>

    " :Ag  - Start fzf with hidden preview window that can be enabled with ? key
    " :Ag! - Start fzf in fullscreen and display the preview window above
    command! -bang -nargs=* Ag
        \ call fzf#vim#ag(<q-args>,
        \                 <bang>0 ? fzf#vim#with_preview('up:60%')
        \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
        \                 <bang>0)

    " :Search - Take argument to specify directory
    command! -bang -nargs=+ Search
        \ call fzf#vim#ag_raw('--hidden ' .<q-args>, fzf#vim#with_preview('up:60%'), <bang>1)

    " Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
    command! -bang -nargs=* Rg
        \ call fzf#vim#grep(
        \   'rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1,
        \   <bang>0 ? fzf#vim#with_preview('up:60%')
        \           : fzf#vim#with_preview('right:50%:hidden', '?'),
        \   <bang>0)

    " Mapping selecting mappings
    nmap <leader><tab> <plug>(fzf-maps-n)
    xmap <leader><tab> <plug>(fzf-maps-x)
    omap <leader><tab> <plug>(fzf-maps-o)

    " :Files command with preview window
    command! -bang -nargs=? -complete=dir Files
        \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

"
" Git Integrate
"
Plug 'tpope/vim-fugitive' " git
    nnoremap <leader>gs :Gtabedit :<CR>
    nnoremap <leader>gd :Gdiff<CR>
    nnoremap <leader>gb :Gblame<CR>
    nnoremap <leader>gc :Gcheckout<CR>
Plug 'idanarye/vim-merginal' " git branch
    nnoremap <leader>gm :Merginal<CR>
Plug 'airblade/vim-gitgutter' " gitgutter
Plug 'rbong/vim-flog' " git graph
    nnoremap <leader>gg :Flog<CR>

function! s:changebranch(branch)
    execute 'Git checkout' . a:branch
endfunction

command! -bang Gcheckout call fzf#run({
    \ 'source': 'git branch -a --no-color | grep -v "^\* " ',
    \ 'sink': function('s:changebranch')
    \ })

"
" Workspace manager
"
Plug 'mhinz/vim-startify' " start screen, create workspace with :SS
    let g:startify_custom_header = [] " Remove cowsay
    let g:startify_session_persistence = 1
    let g:startify_lists = [
      \ { 'type': 'sessions',  'header': ['   Sessions']        },
      \ { 'type': 'files',     'header': ['   MRU']             },
      \ { 'type': 'dir',       'header': ['   MRU '. getcwd()]  },
      \ { 'type': 'bookmarks', 'header': ['   Bookmarks']       },
      \ { 'type': 'commands',  'header': ['   Commands']        },
      \ ]
Plug '907th/vim-auto-save' " Auto save
    let g:auto_save = 1  " enable AutoSave on Vim startup
    let g:auto_save_silent = 1  " do not display the auto-save notification
Plug 'editorconfig/editorconfig-vim' " .editorconfig

"
" Languages
"
Plug 'sheerun/vim-polyglot'

"
" 'I dont know what this is but seem important'
Plug 'tmux-plugins/vim-tmux-focus-events'

"
" Tools
"
Plug 'tpope/vim-sleuth' " Smart indent
Plug 'jiangmiao/auto-pairs' " Auto add closing bracket
Plug 'tpope/vim-surround' " Add/change/delete quote, bracket & tag easily
Plug 'junegunn/vim-easy-align'
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
Plug 'scrooloose/nerdcommenter' " <leader>c<space> to toggle comments
Plug 'tpope/vim-eunuch' " Unix commnands in vim
Plug 'AndrewRadev/splitjoin.vim' " gS split gJ join
Plug 'easymotion/vim-easymotion' " jump cussor around
Plug 'tpope/vim-unimpaired' " Next and previous
Plug 'tpope/vim-repeat' " . work with vim-surround
Plug 'wellle/targets.vim' " delete/change next \' \" \, \{ \].....
Plug 'kana/vim-textobj-user' " Julian/vim-textobj-variable-segment dependecy
Plug 'Julian/vim-textobj-variable-segment' " civ select snake_case

"
" Utinity
"
Plug 'farmergreg/vim-lastplace'
Plug 'yuttie/comfortable-motion.vim'
    let g:comfortable_motion_friction = 0.0
    let g:comfortable_motion_air_drag = 5.0
    nnoremap <leader>j :call comfortable_motion#flick(200)<CR>
    nnoremap <leader>k :call comfortable_motion#flick(-200)<CR>
    vnoremap <leader>j :call comfortable_motion#flick(200)<CR>
    vnoremap <leader>k :call comfortable_motion#flick(-200)<CR>

command! -nargs=? -complete=buffer -bang CloseOtherBuffers
    \ :call CloseOtherBuffers('<args>', '<bang>')

function! CloseOtherBuffers(buffer, bang)
	if a:buffer == ''
		" No buffer provided, use the current buffer.
		let buffer = bufnr('%')
	elseif (a:buffer + 0) > 0
		" A buffer number was provided.
		let buffer = bufnr(a:buffer + 0)
	else
		" A buffer name was provided.
		let buffer = bufnr(a:buffer)
	endif

	if buffer == -1
		echohl ErrorMsg
		echomsg "No matching buffer for" a:buffer
		echohl None
		return
	endif

	let last_buffer = bufnr('$')

	let delete_count = 0
	let n = 1
	while n <= last_buffer
		if n != buffer && buflisted(n)
			if a:bang == '' && getbufvar(n, '&modified')
				echohl ErrorMsg
				echomsg 'No write since last change for buffer'
							\ n '(add ! to override)'
				echohl None
			else
				silent exe 'bdel' . a:bang . ' ' . n
				if ! buflisted(n)
					let delete_count = delete_count+1
				endif
			endif
		endif
		let n = n+1
	endwhile

	if delete_count == 1
		echomsg delete_count "buffer deleted"
	elseif delete_count > 1
		echomsg delete_count "buffers deleted"
	endif
endfunction

call plug#end()

" Color scheme
set background=dark
color gruvbox
