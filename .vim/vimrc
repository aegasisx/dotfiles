" Change map leader to <Space>
let mapleader=" "

" Color scheme
color kuroi
set background=dark

" Tab/Space
set expandtab
set tabstop=4
set shiftwidth=4
set smarttab

" Set list char
set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:¶,precedes:«,extends:»

" Basic
filetype indent on
filetype plugin indent on " Indent helpers
set noswapfile
let $FZF_DEFAULT_COMMAND='find -L -not -path "./.git/*"'
set autoread " automatic read file when changed outide vim
set cursorline " Highlight current line
set nofoldenable
set foldmethod=indent
set hidden
set ignorecase
set incsearch
set hlsearch
set laststatus=2
set lazyredraw
set linebreak
set mouse=a
set noshowmode
set number
set showcmd
set showmatch
set smartcase
set ttyfast
set undofile                " Save undo after file closes
set undodir=~/.vim/undo     " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo
set wildmenu " Turn on wildmenu
set wrap
set notimeout
set ttimeout
set clipboard=unnamedplus
syntax enable

" Mapping
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> g<Down>
nnoremap <Up> g<Up>
vnoremap <Down> g<Down>
vnoremap <Up> g<Up>
nnoremap <leader>d "_d
xnoremap <leader>d "_d
xnoremap <leader>p "_dP
nnoremap <leader>n :nohlsearch<CR> " turn off search highlight
nnoremap <silent> <leader>q :q<CR>
nnoremap <silent> <leader>w :bd<CR>
nnoremap <silent> <leader>l :set list!<CR>

call plug#begin('~/.vim/plugged')

"""""" File Browser
Plug 'scrooloose/nerdtree' " nerdtree
    let NERDTreeShowHidden=1 " Display hidden files
    nnoremap <silent> <leader>e :NERDTreeFind<CR>
    nnoremap <silent> <F4> :NERDTreeToggle<CR>
Plug 'Xuyuanp/nerdtree-git-plugin'
    let g:NERDTreeShowIgnoredStatus = 1

"""""" Window Layout
Plug 'ap/vim-buftabline' " manage buffer the sane way
    let g:buftabline_numbers = 2 " ordinal number
    let g:buftabline_indicators = 1 " show [edited]
    nnoremap <silent><F5> :bp<CR>
    nnoremap <silent><F6> :bn<CR>
    nmap <leader>1 <Plug>BufTabLine.Go(1)
    nmap <leader>2 <Plug>BufTabLine.Go(2)
    nmap <leader>3 <Plug>BufTabLine.Go(3)
    nmap <leader>4 <Plug>BufTabLine.Go(4)
    nmap <leader>5 <Plug>BufTabLine.Go(5)
    nmap <leader>6 <Plug>BufTabLine.Go(6)
    nmap <leader>7 <Plug>BufTabLine.Go(7)
    nmap <leader>8 <Plug>BufTabLine.Go(8)
    nmap <leader>9 <Plug>BufTabLine.Go(9)
    nmap <leader>0 <Plug>BufTabLine.Go(10)
Plug 'itchyny/lightline.vim'
    command! LightlineReload call LightlineReload()
    let g:lightline = {
        \ 'colorscheme': 'powerline',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'readonly', 'fugitive', 'filename', 'modified' ] ],
        \   'right': [ [ 'lineinfo' ],
        \              [ 'indent' ],
        \              [ 'fileformat', 'fileencoding', 'filetype' ]  ]
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightlineFugitive',
        \   'indent':   'LightlineIndent',
        \   'lineinfo': 'LightlineLineInfo'
        \ }
        \ }
function! LightlineFugitive()
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        return fugitive#head()
    else
        return ''
    endif
endfunction

function! LightlineIndent()
    let et = &et ==# 1 ? "space" : "tab"
    return (et . ':'. &tabstop . ' (' . &shiftwidth . ')' )
endfunction

function! LightlineLineInfo()
    return line('.') . ':' . col('.') . ' of ' . line('$')
endfunction

function! LightlineReload()
    call lightline#init()
    call lightline#colorscheme()
    call lightline#update()
endfunction

"""""" Jumping around
Plug 'easymotion/vim-easymotion' " jump cussor around
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'brooth/far.vim'                   " Find and replace
    let g:far#window_layout = 'current'

    nnoremap <silent> <C-p> :Files<CR>
    nnoremap <F1> :Commands<CR>
    nnoremap <F2> :Search!<space>

    " :Ag  - Start fzf with hidden preview window that can be enabled with ? key
    " :Ag! - Start fzf in fullscreen and display the preview window above
    command! -bang -nargs=* Ag
        \ call fzf#vim#ag(<q-args>,
        \                 <bang>0 ? fzf#vim#with_preview('up:60%')
        \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
        \                 <bang>0)

    " :Agr - Take argument to specify directory
    command! -bang -nargs=+ Search
        \ call fzf#vim#ag_raw('--hidden ' .<q-args>,
        \                 <bang>0 ? fzf#vim#with_preview('up:60%')
        \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
        \                 <bang>0)

    " Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
    command! -bang -nargs=* Rg
        \ call fzf#vim#grep(
        \   'rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1,
        \   <bang>0 ? fzf#vim#with_preview('up:60%')
        \           : fzf#vim#with_preview('right:50%:hidden', '?'),
        \   <bang>0)

    " Mapping selecting mappings
    nmap <leader><tab> <plug>(fzf-maps-n)
    xmap <leader><tab> <plug>(fzf-maps-x)
    omap <leader><tab> <plug>(fzf-maps-o)

    " :Files command with preview window
    command! -bang -nargs=? -complete=dir Files
        \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

"""""" Git Integrate
Plug 'tpope/vim-fugitive' " git
Plug 'junegunn/gv.vim'
Plug 'idanarye/vim-merginal' " git branch
Plug 'airblade/vim-gitgutter' " gitgutter

"""""" Workspace
Plug '907th/vim-auto-save' " Auto save
    let g:auto_save = 1  " enable AutoSave on Vim startup
    let g:auto_save_silent = 1  " do not display the auto-save notification
Plug 'editorconfig/editorconfig-vim' " .editorconfig
Plug 'thaerkh/vim-workspace' " Workspace
    let g:workspace_undodir           = $HOME.'/.vim/undo'
    let g:workspace_session_directory = $HOME.'/.vim/sessions/'
    let g:workspace_autosave          = 0 " autosave off
    let g:workspace_autosave_untrailspaces  = 0 " no remove trailing space
    let g:workspace_session_disable_on_args = 1 " open a single file do not open workspace
Plug 'mhinz/vim-startify' " start screen
    let g:startify_custom_header = [] " Remove cowsay

"""""" Languages
Plug 'sheerun/vim-polyglot'

Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'RRethy/vim-illuminate' " highlight current word
Plug 'tpope/vim-surround' " Add quote, bracket & tag easily
Plug 'tpope/vim-sleuth' " Smart indent
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-unimpaired'
Plug 'junegunn/vim-easy-align'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-eunuch'
Plug 'terryma/vim-multiple-cursors'
Plug 'ervandew/supertab'
Plug 'farmergreg/vim-lastplace'
Plug 'ryanoasis/vim-devicons'
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    let g:DevIconsEnableFoldersOpenClose = 1
Plug 'kshenoy/vim-signature'
Plug 'ludovicchabant/vim-gutentags'
    let g:gutentags_cache_dir = $HOME.'/.vim/plugged'
Plug 'Yggdroot/indentLine'
Plug 'majutsushi/tagbar'
    nmap <F3> :TagbarToggle<CR>

call plug#end()
